export type Story = import("../types/code.js").Story;
export type ParseResult = import("../types/code.js").ParseResult;
export type ProcessResult = import("../types/code.js").ProcessResult;
export type MdjsProcessPlugin = import("../types/code.js").MdjsProcessPlugin;
/**
 * Processes mdjs to html/js/stories
 *
 * Js code includes the linking between js and stories
 *
 * @param {string} mdjs
 * @param {object} options
 * @param {string} [options.rootNodeQueryCode]
 * @param {function[]} [options.setupUnifiedPlugins]
 * @param {MdjsProcessPlugin[]} [options.plugins] deprecated option use setupUnifiedPlugins instead
 */
export function mdjsProcess(mdjs: string, { rootNodeQueryCode, setupUnifiedPlugins }?: {
    rootNodeQueryCode: string | undefined;
    setupUnifiedPlugins: Function[] | undefined;
    plugins: import("../types/code.js").MdjsProcessPlugin[] | undefined;
}): Promise<{
    stories: import("../types/code.js").Story[];
    jsCode: string;
    html: string;
}>;
//# sourceMappingURL=mdjsProcess.d.ts.map